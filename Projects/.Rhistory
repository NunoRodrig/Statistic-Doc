## NOTE: Do not round the result!
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
pathname<-directory
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
filename<-pollutant
full_path<-c(pathname,filename)
data <- read.table(file_name)
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean(c:\,rast.txt, 1:22)
pollutantmean('c:\','rast.txt'', 1:22)
pollutantmean("c:\","rast.txt"", 1:22)
pollutantmean("c:\","rast.txt, 1:22)
pollutantmean("c:\")
}
{}
}
kjas
as
a
sa
s{}
}
}
{}
<
>
quit
posu
exit
quit()
}
.
eexists()
exists()
data <- read.csv(file_name)
pollutantmean('c:\asas',rast.txt, 1:22)
print(full_path)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
pathname<-directory
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
filename<-pollutant
full_path<-c(pathname,filename)
print(full_path)
##data <- read.csv(file_name)
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean('c:\asas',rast.txt, 1:22)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
pathname<-directory
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
filename<-pollutant
full_path<-c(pathname,filename)
full_path
##data <- read.csv(file_name)
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean('c:\',file_txt,121)
pollutantmean
pollutantmean
212
qw
as,
as.
pollutantmean('c:\','file.txt, '121')
pollutantmean('c:\','file.txt'', '121')
pollutantmean('c:\','file.txt', '121')
pollutantmean("c:\","file.txt"", "121")
pollutantmean("c:\","file.txt", "121")
pollutantmean(directory="c:\",pollutant"file.txt", 1)
pollutantmean(directory="c:\",pollutant="file.txt", 1)
pollutantmean(directory="c:\",pollutant="file.txt", id=1)
pollutantmean(directory="c:",pollutant="file.txt", id=1)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
pathname<-directory
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
filename<-pollutant
full_path<-c(pathname,filename)
print(full_path)
##data <- read.csv(file_name)
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
pathname<-directory
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
filename<-pollutant
full_path<-c(pathname,filename)
print(full_path)
##data <- read.csv(file_name)
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean(directory="c:",pollutant="file.txt", id=1)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
pathname<-directory
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
filename<-pollutant
full_path<-paste(pathname,filename)
print(full_path)
##data <- read.csv(file_name)
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
pathname<-directory
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
filename<-pollutant
full_path<-paste(pathname,filename)
print(full_path)
##data <- read.csv(file_name)
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean(directory="c:",pollutant="file.txt", id=1)
pollutantmean(directory="c:\",pollutant="file.txt", id=1)
pollutantmean(directory='c:\',pollutant="file.txt", id=1)
}
exit
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
pathname<-directory
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
filename<-pollutant
full_path<-paste(pathname,filename)
print(full_path)
##data <- read.csv(file_name)
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
system.file("file.txt")
system.file("specdata"","file.txt")
system.file("specdata,"file.txt")
system.file("specdata","file.txt")
system.file("\specdata","file.txt")
system.file("specdata","001.txt")
system.file("specdata","001.csv")
library(datasets)
data(iris)
?iris
iris
iris[Sepal.Length]
iris["Sepal.Length"]
x-<lis(iris["Sepal.Length"])
x<-list(iris["Sepal.Length"])
x
mean(x)
x<-list(iris["Sepal.Length"],na.rm=TRUE)
x
mean(x)
xx<-c(x)
xx
mean(XX)
mean(X)
media<-mean(x)
xx
mean(x, trim=0)
mean(x)
as.vector(XX)
as.vector(X)
xx
as.vector(XX)
is.vector(XX)
is.vector(X)
iris
iris[1]
is.vector(iris[1])
as.vector(iris[1])
mean(as.vector(iris[1]))
mean(as.numeric(iris[1]))
class(iris)
as.matrix(iris[1])
mean(as.matrix(iris[1]))
install.packages("swirl")
library("swirl")
View(pollutantmean)
ls
library("swirl")
swirl
install_from_swirl("R Programming")
swirl()
bye
5 + 7
bye
bye()
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
x <- 5 + 7
x
y <- x - 3
9
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, 5)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) - c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
z * 2 + 1000
my_div
install.packages("xlsxjars")
install.packages("xlsx")
library(xlsx)
library("xlsx", lib.loc="~/R/win-library/3.2")
library("xlsx", lib.loc="~/R/win-library/3.2")
detach("package:xlsx", unload=TRUE)
library("rJava", lib.loc="~/R/win-library/3.2")
remove.packages("rJava", lib="~/R/win-library/3.2")
install.packages("rJava")
library("rJava", lib.loc="~/R/win-library/3.2")
detach("package:rJava", unload=TRUE)
library("xlsx", lib.loc="~/R/win-library/3.2")
detach("package:xlsx", unload=TRUE)
library("xlsx", lib.loc="~/R/win-library/3.2")
detach("package:xlsx", unload=TRUE)
remove.packages("xlsx", lib="~/R/win-library/3.2")
remove.packages("xlsxjars", lib="~/R/win-library/3.2")
install.packages("xlsxjars")
install.packages("xlsx")
library("xlsx", lib.loc="~/R/win-library/3.2")
detach("package:xlsx", unload=TRUE)
remove.packages("rJava", lib="~/R/win-library/3.2")
install.packages("rJava")
library("rJava", lib.loc="~/R/win-library/3.2")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/R/win-library/3.2")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/R/win-library/3.2")
library(httr)
html2 = GET(http://biostat.jhsph.edu/~jleek/contact.html )
html2 = GET("http://biostat.jhsph.edu/~jleek/contact.html)
html2 = GET("http://biostat.jhsph.edu/~jleek/contact.html")
html2 = GET("http://biostat.jhsph.edu/~jleek/contact.html")
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
library("XML")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
parsedHtml
parsedHtml[1]
parsedHtml
capture.output(parsedHtml)
capture.output(parsedHtml) [15]
nchar(capture.output(parsedHtml) [15])
nchar(capture.output(parsedHtml) [10])
nchar(capture.output(parsedHtml) [20])
capture.output(parsedHtml) [10]
nchar(capture.output(content2) [15])
nchar(capture.output(content2) [10])
capture.output(content2) [10]
content2
head(parsedHtml)
nchar("				<ul class="sidemenu">
")
kdsa
)
""
nchar("				<ul class="sidemenu">
")
nchar("				<ul class="sidemenu">
")
wAQW
SAS
sdsdr
wAQWdszg ii
);
"")
asa
head(parsedHtml)
;
as
source('C:/Users/Nuno.Rodrigues/Desktop/[R]/Projects/pollutantmean.R')
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
setwd("C:/Users/Nuno.Rodrigues/Desktop/[R]/Projects")
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data_set = numeric()
print(data_set)
for (i in id) {
leitura = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
data_set = c(data_set, leitura[[pollutant]])
}
return(mean(data_set, na.rm = TRUE))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
#data_set = numeric()
#print(data_set)
for (i in id) {
leitura = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
data_set = c(data_set, leitura[[pollutant]])
}
return(mean(data_set, na.rm = TRUE))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data_set = numeric()
for (i in id) {
leitura = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
data_set = c(data_set, leitura[[pollutant]])
print(data_set)
}
return(mean(data_set, na.rm = TRUE))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data_set = numeric()
for (i in id) {
leitura = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
data_set = c(data_set, leitura[[pollutant]])
}
return(mean(data_set, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
source("submitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
1
submit()
submit()
submit()
submit()
source("submitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
nobs = numeric()
for (i in id) {
leitura = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(leitura)))
}
return(data.frame(id, nobs))
}
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
submit()
submit()
submit()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
df = complete(directory)
ids = df[df["nobs"] > threshold, ]$id
corrr = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
dff = newRead[complete.cases(newRead), ]
corrr = c(corrr, cor(dff$sulfate, dff$nitrate))
}
return(corrr)
}
corr("specdata", 150)
head(corr("specdata", 150))
cr <- corr("specdata", 150)
head(cr)
summary(cr)
submit()
submit()
submit()
